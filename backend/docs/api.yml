openapi: 3.0.0
info:
  title: Anidex API
  description: We tried to make a RESTfull API for anidex backend.
  version: 1.0.0
servers:
  - url: "http://localhost:5000"
    description: only working server for now

tags:
  - name: anime
    description: anime endpoints
  - name: episode
    description: episode related endpoints
  - name: user
    description: user endpoints
  - name: watchlist
    description: watchlist endpoints
  - name: review
    description: review and comment endpoints
  - name: personnel
    description: personnel endpoints
  - name: character
    description: character endpoints
  - name: watchroom
    description: watchroom endpoints
  - name: genre
    description: genre endpoints
  - name: reviewVote
    description: a little weird way of commenting on a review
  - name: studio
    description: studio endpoints
  - name: search
    description: search endpoints

paths:
  "/anime":
    get:
      summary: returns all anime if successful
      tags:
        - anime
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    $ref: "#/components/schemas/AnimeAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: adds an anime
      tags:
        - anime
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/AnimeInput"
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  animeid:
                    type: integer
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/anime/{aid}":
    get:
      summary: returns the anime specified by the anime id if found
      tags:
        - anime
      parameters:
        - $ref: "#/components/parameters/aid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  anime:
                    $ref: "#/components/schemas/AnimeCommon"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/anime/pictures/{aid}":
    get:
      summary: get anime pictures
      tags:
        - anime
      parameters:
        - $ref: "#/components/parameters/aid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  gallery:
                    type: array
                    $ref: "#/components/schemas/AnimeGallery"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/anime/items/{aid}":
    get:
      summary: get anime items
      tags:
        - anime
      parameters:
        - $ref: "#/components/parameters/aid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  characters:
                    type: array
                    items:
                      type: integer
                  genre:
                    type: array
                    items:
                      type: string
                  personnel:
                    type: array
                    items:
                      type: integer
                  studios:
                    type: array
                    items:
                      type: string
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/users":
    get:
      summary: get all users
      tags:
        - user
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    $ref: "#/components/schemas/UserAllOutput"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/users/{uid}":
    get:
      summary: returns user specified by user id if found
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/uid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/UserSingleOutput"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/users/signup":
    post:
      summary: signup a new user
      tags:
        - user
      requestBody:
        description: signup data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSignIn"
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessOutput"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/users/login":
    post:
      summary: login a user
      tags:
        - user
      requestBody:
        description: login data
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccessOutput"

        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/watchlist/{uid}":
    get:
      summary: view user watchlist
      tags:
        - watchlist
      parameters:
        - $ref: "#/components/parameters/uid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WatchlistWhole"

        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add anime to user watchlist
      tags:
        - watchlist
      parameters:
        - $ref: "#/components/parameters/uid"
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/watchlistInput"
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  WatchlistEntry:
                    $ref: "#/components/schemas/WatchlistEntry"
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/search/anime":
    post:
      summary: search an anime
      tags:
        - search

      requestBody:
        $ref: "#/components/requestBodies/searchItem"

      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resultAnime:
                    $ref: "#/components/schemas/AnimeAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/search/users":
    post:
      summary: search users
      tags:
        - search

      requestBody:
        $ref: "#/components/requestBodies/searchItem"

      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resultUsers:
                    $ref: "#/components/schemas/UserAllOutput"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/search/characters":
    post:
      summary: search characters
      tags:
        - search

      requestBody:
        $ref: "#/components/requestBodies/searchItem"

      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resultUsers:
                    $ref: "#/components/schemas/characterAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/search/personnel":
    post:
      summary: search personnel
      tags:
        - search

      requestBody:
        $ref: "#/components/requestBodies/searchItem"

      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resultUsers:
                    $ref: "#/components/schemas/PersonnelAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/search/episodes":
    post:
      summary: search episodes
      tags:
        - search
      requestBody:
        $ref: "#/components/requestBodies/searchItem"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resultUsers:
                    $ref: "#/components/schemas/episodesAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/search/studio":
    post:
      summary: search studio
      tags:
        - search
      requestBody:
        $ref: "#/components/requestBodies/searchItem"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  resultUsers:
                    $ref: "#/components/schemas/studioAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/characters":
    get:
      summary: get all characters
      tags:
        - character
      responses:
        "200":
          description: successfully got all character
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/characterSingle"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new character
      tags:
        - character
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/characterInput"
      responses:
        "201":
          description: successfully added a character
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  characterid:
                    description: newly created character id
                    type: integer
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/characters/{cid}":
    get:
      summary: get a single character
      tags:
        - character
      parameters:
        - $ref: "#/components/parameters/cid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  character:
                    $ref: "#/components/schemas/characterSingle"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/genre":
    get:
      summary: get all genre
      tags:
        - genre
      responses:
        "200":
          description: successfully got all genre
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    type: array
                    items:
                      type: string
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new genre
      tags:
        - genre
      security:
        - BearerAuth: []
      requestBody:
        description: genre request body
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                genre:
                  type: string
              required:
                - genre
      responses:
        "201":
          description: successfully added a genre
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  newGenreName:
                    description: newly created genre
                    type: string
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/genre/anime":
    post:
      summary: get ids of all anime of a single genre
      tags:
        - genre
      requestBody:
        description: the genre to list anime of
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                searchedGenre:
                  type: string
              required:
                - searchedGenre
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  animeOfGenre:
                    type: array
                    items:
                      type: integer
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/personnel":
    get:
      summary: get all personnel data
      tags:
        - personnel
      responses:
        "200":
          description: successfully got all person
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/personnel"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new person
      tags:
        - personnel
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PersonInput"
      responses:
        "201":
          description: successfully added a person
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  personnelID:
                    description: newly created personnel id
                    type: integer
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/personnel/{pid}":
    get:
      summary: get a single person
      tags:
        - personnel
      parameters:
        - $ref: "#/components/parameters/pid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  person:
                    $ref: "#/components/schemas/personnel"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/watchroom":
    get:
      summary: get all watchrooms data
      tags:
        - watchroom
      responses:
        "200":
          description: successfully got all watchroom
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  results:
                    $ref: "#/components/schemas/WatchroomAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new watchroom
      tags:
        - watchroom
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/WatchroomInput"
      responses:
        "201":
          description: successfully added a watchroom
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  watchroomid:
                    description: newly created watchroom id
                    type: integer
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/watchroom/{watchroomid}":
    get:
      summary: get a single watchroom
      tags:
        - watchroom
      parameters:
        - $ref: "#/components/parameters/watchroomid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  watchroom:
                    $ref: "#/components/schemas/WatchroomSingle"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/wachroom/participants/{watchroomid}":
    get:
      summary: get ids of all participants of a watchroom
      tags:
        - watchroom
      parameters:
        - $ref: "#/components/parameters/watchroomid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  participants:
                    type: array
                    items:
                      type: string
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new participant to a watchroom
      tags:
        - watchroom
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/watchroomid"
      requestBody:
        $ref: "#/components/requestBodies/WatchroomParticipantInput"
      responses:
        "201":
          description: successfully added a participant to a watchroom
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  participant:
                    $ref: "#/components/schemas/WatchroomParticipants"
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/reviews/{aid}":
    get:
      summary: get all reviews of this anime
      tags:
        - review
      parameters:
        - $ref: "#/components/parameters/aid"
      responses:
        "200":
          description: successfully got all review of this anime
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  reviews:
                    $ref: "#/components/schemas/reviewAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new review to an anime
      tags:
        - review
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/aid"
      requestBody:
        $ref: "#/components/requestBodies/ReviewInput"
      responses:
        "201":
          description: successfully added a review to this anime
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  newReview:
                    $ref: "#/components/schemas/reviewSingle"
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/reviews/single/{reviewid}":
    get:
      summary: get a single review
      tags:
        - review
      parameters:
        - $ref: "#/components/parameters/reviewid"
      responses:
        "200":
          description: successfully got this review
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  review:
                    $ref: "#/components/schemas/reviewSingle"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/episodes/{aid}":
    get:
      summary: get all episodes of the provided anime
      tags:
        - episode
      parameters:
        - $ref: "#/components/parameters/aid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  episodes:
                    $ref: "#/components/schemas/episodesAll"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

    post:
      summary: add a new episode to an anime
      tags:
        - episode
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/aid"
      requestBody:
        $ref: "#/components/requestBodies/EpisodeInput"
      responses:
        "201":
          description: successfully added an episode to this anime
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  newEpisode:
                    $ref: "#/components/schemas/episodeSingle"
        "401":
          $ref: "#/components/responses/401AuthFailure"
        "422":
          $ref: "#/components/responses/422InvalidInput"
        "500":
          $ref: "#/components/responses/500ServerSideError"

  "/episodes/single/{episodeid}":
    get:
      summary: get a single episode with provided id
      tags:
        - episode
      parameters:
        - $ref: "#/components/parameters/episodeid"
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  episode:
                    $ref: "#/components/schemas/episodeSingle"
        "404":
          $ref: "#/components/responses/404NotFound"
        "500":
          $ref: "#/components/responses/500ServerSideError"

components:
  # Reusable schemas (data models)
  schemas:
    UserSignIn:
      type: object
      properties:
        userid:
          type: string
        password:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
      required:
        - userid
        - password
        - email

    UserLogin:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - name
        - password
        - email

    LoginSuccessOutput:
      type: object
      properties:
        success:
          type: boolean
        userid:
          type: string
        email:
          type: string
          format: email
        token:
          type: string
          format: jwt

    UserSingleOutput:
      type: object
      properties:
        userid:
          type: string
        email:
          type: string
          format: email
        bio:
          type: string
        pictureid:
          type: string
        admin:
          type: boolean

    UserAllOutput:
      type: array
      items:
        $ref: "#/components/schemas/UserSingleOutput"

    AnimeCommon:
      type: object
      properties:
        animeid:
          type: integer
          minimum: 1
        title:
          type: string
        releaseseason:
          type: string
          enum: ["Spring", "Summer", "Winter", "Fall"]
        releasedate:
          type: string
          format: date
        averagerating:
          type: number
        animerank:
          type: integer
        synopsis:
          type: string

    AnimeAll:
      type: array
      items:
        $ref: "#/components/schemas/AnimeCommon"

    WatchlistEntry:
      type: object
      properties:
        animeid:
          type: integer
        userid:
          type: string
        favourite:
          type: boolean
      required:
        - animeid
        - userid
        - favourite

    WatchlistWhole:
      type: array
      items:
        $ref: "#/components/schemas/WatchlistEntry"

    AnimePicture:
      type: object
      properties:
        pictureid:
          type: string
        poster:
          type: boolean

    AnimeGallery:
      type: array
      items:
        $ref: "#/components/schemas/AnimePicture"

    characterSingle:
      type: object
      properties:
        characterid:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        genre:
          type: string
        age:
          type: string
        dateofbirth:
          type: integer
          format: date
        role:
          type: string
        description:
          type: string
        pictureid:
          type: string

    characterAll:
      type: array
      items:
        $ref: "#/components/schemas/characterSingle"

    personnel:
      type: object
      properties:
        personnelid:
          type: integer
        firstname:
          type: string
        lastname:
          type: string
        genre:
          type: string
        age:
          type: string
        birthday:
          type: integer
          format: date
        address:
          type: integer
        website:
          type: string
          format: url
        pictureid:
          type: string

    PersonnelAll:
      type: array
      items:
        $ref: "#/components/schemas/personnel"

    episodeSingle:
      type: object
      properties:
        episodeid:
          type: integer
        episode:
          type: integer
        season:
          type: integer
        airingdate:
          type: integer
          format: date
        title:
          type: string
        runtme:
          type: integer
          format: time
        episoderating:
          type: number
        animeid:
          type: integer

    episodesAll:
      type: array
      items:
        $ref: "#/components/schemas/episodeSingle"

    episodeInput:
      type: object
      properties:
        episode:
          type: integer
        season:
          type: integer
        animeid:
          type: integer
        title:
          type: string
      required:
        - episode
        - season
        - animeid
        - title

    studioSingle:
      type: object
      properties:
        studioid:
          type: string
        foundingdate:
          type: integer
          format: date
        office_address:
          type: string
        website:
          type: string
          format: url

    studioAll:
      type: array
      items:
        $ref: "#/components/schemas/studioSingle"

    failedResponses:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    watchlistInput:
      type: object
      properties:
        animeid:
          type: integer
        favourite:
          type: boolean
      required:
        - animeid
        - favourite

    AnimeInput:
      type: object
      properties:
        title:
          type: string
        releasedate:
          type: integer
          format: date
        synopsis:
          type: string
      required:
        - title
        - releasedate
        - synopsis

    PersonInput:
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        gender:
          type: string
        birthday:
          type: string
          format: date
      required:
        - lastname
        - firstname
        - gender
        - birthday

    WatchroomSingle:
      type: object
      properties:
        watchroomid:
          type: integer
          minimum: 1
        watchroomname:
          type: string
        starttime:
          type: number
          format: timestamp
        endtime:
          type: number
          format: timestamp
        animeid:
          type: integer
          minimum: 1
        description:
          type: string

    WatchroomAll:
      type: array
      items:
        $ref: "#/components/schemas/WatchroomSingle"

    WatchroomParticipants:
      type: object
      properties:
        userid:
          type: string
        watchroomid:
          type: integer

    reviewSingle:
      type: object
      properties:
        reviewid:
          type: integer
          minimum: 1
        content:
          type: string
        votes:
          type: integer
        reviewtime:
          type: number
          format: timestamp
        animeid:
          type: integer
          minimum: 1
        userid:
          type: string

    reviewAll:
      type: array
      items:
        $ref: "#/components/schemas/reviewSingle"

    reviewInput:
      type: object
      properties:
        content:
          type: string
        animeid:
          type: integer
          minimum: 1
        userid:
          type: string

  requestBodies:
    searchItem:
      description: search string
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              searchString:
                type: string
            required:
              - searchString

    AnimeInput:
      description: anime data to add
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AnimeInput"

    watchlistInput:
      description: watchlist entry to add
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              animeid:
                type: integer
              favourite:
                type: boolean
            required:
              - animeid
              - favourite

    characterInput:
      description: new character to entry
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              lastname:
                type: string
              firstname:
                type: string
              gender:
                type: string
              role:
                type: string
            required:
              - lastname
              - firstname
              - gender
              - role

    PersonInput:
      description: request body for personnel
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PersonInput"

    WatchroomInput:
      description: new watchroom to create
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              watchroomname:
                type: string
              animeid:
                type: integer
                minimum: 1
              description:
                type: string
            required:
              - watchroomname
              - animeid
              - description

    WatchroomParticipantInput:
      description: the participant to add to watchroom
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userid:
                type: string
            required:
              - userid

    ReviewInput:
      description: new review data
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/reviewInput"

    EpisodeInput:
      description: new episode data
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/episodeInput"

  # Reusable path, query, header and cookie parameters
  parameters:
    uid:
      in: path
      name: uid
      required: true
      schema:
        type: string
      description: userID of user

    aid:
      in: path
      name: aid
      required: true
      schema:
        type: integer
        minimum: 1
      description: animeid of the anime

    cid:
      in: path
      name: cid
      required: true
      schema:
        type: integer
        minimum: 1
      description: character id of the character

    pid:
      in: path
      name: pid
      required: true
      schema:
        type: integer
        minimum: 1
      description: personnel id of the person

    watchroomid:
      in: path
      name: watchroomid
      required: true
      schema:
        type: integer
        minimum: 1
      description: id of the watchroom

    reviewid:
      in: path
      name: reviewid
      required: true
      schema:
        type: integer
        minimum: 1
      description: id of the review

    episodeid:
      in: path
      name: episodeid
      required: true
      schema:
        type: integer
        minimum: 1
      description: id of the episode

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt

  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    400badrequest:
      description: the API request was badly formed
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponses"

    404NotFound:
      description: the requested resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponses"

    500ServerSideError:
      description: unknown server side error happened, please try again later
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponses"

    422InvalidInput:
      description: provided inputs are invalid, please check your inputs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponses"

    403Forbidden:
      description: the requested resource or operation is not available for this user
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponses"

    401AuthFailure:
      description: failure in authenticating this API call by JWT
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/failedResponses"
